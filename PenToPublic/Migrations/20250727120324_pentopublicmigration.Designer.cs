// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PenToPublic.Data;

#nullable disable

namespace PenToPublic.Migrations
{
    [DbContext(typeof(PenToPublicContext))]
    [Migration("20250727120324_pentopublicmigration")]
    partial class pentopublicmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PenToPublic.Models.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("PenToPublic.Models.AdminApproval", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApprovalId"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Decision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ApprovalId");

                    b.HasIndex("AdminId");

                    b.HasIndex("BookId");

                    b.ToTable("AdminApproval");
                });

            modelBuilder.Entity("PenToPublic.Models.AuthorDetail", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("AuthorDetail");
                });

            modelBuilder.Entity("PenToPublic.Models.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UploadDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BookId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("PenToPublic.Models.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookCategory");
                });

            modelBuilder.Entity("PenToPublic.Models.BookFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("AudioPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("FrontPageLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PdfPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileId");

                    b.HasIndex("BookId");

                    b.ToTable("BookFile");
                });

            modelBuilder.Entity("PenToPublic.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("PenToPublic.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("UserId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("PenToPublic.Models.ReaderDetail", b =>
                {
                    b.Property<int>("ReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReaderId"));

                    b.Property<bool?>("IsSubscribed")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReaderId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("ReaderDetail");
                });

            modelBuilder.Entity("PenToPublic.Models.ReadingProgress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProgressId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<int?>("LastPage")
                        .HasColumnType("int");

                    b.Property<decimal?>("PercentRead")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProgressId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("ReadingProgress");
                });

            modelBuilder.Entity("PenToPublic.Models.Registration", b =>
                {
                    b.Property<int>("RegId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegId");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("PenToPublic.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("PenToPublic.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RegId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RegId")
                        .IsUnique()
                        .HasFilter("[RegId] IS NOT NULL");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PenToPublic.Models.AdminApproval", b =>
                {
                    b.HasOne("PenToPublic.Models.Admin", "Admin")
                        .WithMany("AdminApprovals")
                        .HasForeignKey("AdminId");

                    b.HasOne("PenToPublic.Models.Book", "Book")
                        .WithMany("AdminApprovals")
                        .HasForeignKey("BookId");

                    b.Navigation("Admin");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("PenToPublic.Models.AuthorDetail", b =>
                {
                    b.HasOne("PenToPublic.Models.User", "User")
                        .WithOne("AuthorDetail")
                        .HasForeignKey("PenToPublic.Models.AuthorDetail", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenToPublic.Models.Book", b =>
                {
                    b.HasOne("PenToPublic.Models.User", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("PenToPublic.Models.BookCategory", b =>
                {
                    b.HasOne("PenToPublic.Models.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PenToPublic.Models.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PenToPublic.Models.BookFile", b =>
                {
                    b.HasOne("PenToPublic.Models.Book", "Book")
                        .WithMany("BookFiles")
                        .HasForeignKey("BookId");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("PenToPublic.Models.Payment", b =>
                {
                    b.HasOne("PenToPublic.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenToPublic.Models.ReaderDetail", b =>
                {
                    b.HasOne("PenToPublic.Models.User", "User")
                        .WithOne("ReaderDetail")
                        .HasForeignKey("PenToPublic.Models.ReaderDetail", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenToPublic.Models.ReadingProgress", b =>
                {
                    b.HasOne("PenToPublic.Models.Book", "Book")
                        .WithMany("ReadingProgresses")
                        .HasForeignKey("BookId");

                    b.HasOne("PenToPublic.Models.User", "User")
                        .WithMany("ReadingProgresses")
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenToPublic.Models.Review", b =>
                {
                    b.HasOne("PenToPublic.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId");

                    b.HasOne("PenToPublic.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId");

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PenToPublic.Models.User", b =>
                {
                    b.HasOne("PenToPublic.Models.Registration", "Reg")
                        .WithOne("User")
                        .HasForeignKey("PenToPublic.Models.User", "RegId");

                    b.Navigation("Reg");
                });

            modelBuilder.Entity("PenToPublic.Models.Admin", b =>
                {
                    b.Navigation("AdminApprovals");
                });

            modelBuilder.Entity("PenToPublic.Models.Book", b =>
                {
                    b.Navigation("AdminApprovals");

                    b.Navigation("BookCategories");

                    b.Navigation("BookFiles");

                    b.Navigation("ReadingProgresses");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("PenToPublic.Models.Category", b =>
                {
                    b.Navigation("BookCategories");
                });

            modelBuilder.Entity("PenToPublic.Models.Registration", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("PenToPublic.Models.User", b =>
                {
                    b.Navigation("AuthorDetail");

                    b.Navigation("Books");

                    b.Navigation("Payments");

                    b.Navigation("ReaderDetail");

                    b.Navigation("ReadingProgresses");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
